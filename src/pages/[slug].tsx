import type {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
  NextPage,
} from "next";
import Head from "next/head";
import superjson from "superjson";
import { api } from "@/utils/api";
import LoadingSpinner from "@/components/LoadingSpinner";
import { appRouter } from "@/server/api/root";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { prisma } from "@/server/db";
import { fullNameToUserName } from "@/utils/helpers";
import PageLayout from "@/components/PageLayout";
import Image from "next/image";

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

const ProfilePage: NextPage<PageProps> = ({ slug }) => {
  const { data, isLoading } = api.profile.getUserById.useQuery(slug);

  if (isLoading) return <LoadingSpinner />;
  if (!data) return <div>404 | User not found</div>;

  const username = fullNameToUserName(data.fullName);

  return (
    <>
      <Head>
        <title>@{fullNameToUserName(data.fullName)} | Chirp T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="relative h-48 bg-slate-600">
          <Image
            src={data.profileImageUrl}
            alt={`${username}'s profile image`}
            width={128}
            height={128}
            className="absolute left-0 bottom-0 ml-4 translate-y-1/2 transform rounded-full border-4 border-black bg-black"
          />
        </div>

        <div className="h-16" />

        <div className="px-6 py-1">
          <h3 className="text-2xl font-bold">{data.fullName}</h3>
          <p className="text-slate-500">@{username}</p>
        </div>
      </PageLayout>
    </>
  );
};

export default ProfilePage;

export const getStaticProps: GetStaticProps<{ slug: string }> = async (ctx) => {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: { prisma, currentUserId: "" },
    transformer: superjson,
  });

  const slug = ctx.params?.slug;

  if (typeof slug !== "string") throw new Error("No Slug");

  await ssg.profile.getUserById.prefetch(slug);

  return {
    props: {
      trpcState: ssg.dehydrate(),
      slug,
    },
  };
};

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
