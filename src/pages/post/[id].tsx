import type {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
  NextPage,
} from "next";
import Head from "next/head";
import { api } from "@/utils/api";
import LoadingSpinner from "@/components/LoadingSpinner";
import { fullNameToUserName } from "@/utils/helpers";
import PageLayout from "@/components/PageLayout";
import PostView from "@/components/PostView";
import { generateSSGHelper } from "@/server/ssgHelper";

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

const SinglePostPage: NextPage<PageProps> = ({ postId }) => {
  const { data, isLoading } = api.posts.getById.useQuery(postId);

  if (isLoading) return <LoadingSpinner />;
  if (!data) return <div>404 | Post not found</div>;

  const authorUsername = fullNameToUserName(data.author.fullName);

  return (
    <>
      <Head>
        <title>
          {`${data.post.content.slice(
            0,
            4
          )} - @${authorUsername} | Chirp T3 App`}
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <PostView {...data} />
      </PageLayout>
    </>
  );
};

export default SinglePostPage;

export const getStaticProps: GetStaticProps<{ postId: string }> = async (
  ctx
) => {
  const ssg = generateSSGHelper();

  const postId = ctx.params?.id;

  if (typeof postId !== "string") throw new Error("No Post ID");

  await ssg.posts.getById.prefetch(postId);

  return {
    props: {
      trpcState: ssg.dehydrate(),
      postId,
    },
  };
};

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
