import { type NextPage } from "next";
import Head from "next/head";

import { type RouterOutputs, api } from "@/utils/api";
import { SignIn, SignInButton, useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { useCallback } from "react";
import { toast } from "react-hot-toast";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

dayjs.extend(relativeTime);

const postsFormSchema = z.object({
  content: z
    .string()
    .min(1, "Please enter at least one emoji.")
    .max(255, "Too many emojis!"),
});

type FormData = z.infer<typeof postsFormSchema>;

const CreatePostWizard = () => {
  const { user } = useUser();
  const ctx = api.useContext();

  const {
    register,
    handleSubmit,
    reset,
    getValues,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(postsFormSchema),
  });

  const hasContent = getValues("content")?.length > 0;

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      reset();
      void ctx.posts.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage =
        e.data?.zodError?.fieldErrors.content?.[0] ||
        "Failed to Post! Please try again later.";

      toast.error(errorMessage);
    },
  });

  const onSubmit = useCallback(
    (data: FormData) => {
      console.log(data);
      if (hasContent) mutate({ content: data.content });
    },
    [hasContent, mutate]
  );

  if (!user) return null;

  return (
    <div className="flex w-full gap-4">
      <Image
        src={user.profileImageUrl}
        alt="profile image"
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
      />

      {/* eslint-disable-next-line @typescript-eslint/no-misused-promises */}
      <form onSubmit={handleSubmit(onSubmit)} className="flex grow">
        <div className="flex grow flex-col">
          <input
            placeholder="Type some emojis"
            className="grow bg-transparent outline-none"
            type="text"
            disabled={isPosting}
            {...register("content")}
            autoComplete="off"
          />

          {errors.content && (
            <div className="text-xs text-red-500">{errors.content.message}</div>
          )}
        </div>

        <button
          type="submit"
          disabled={isPosting || !hasContent}
          className="disabled:cursor-not-allowed disabled:opacity-50"
        >
          {isPosting ? "Posting..." : "Post"}
        </button>
      </form>
    </div>
  );
};

type PostWithAuthor = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithAuthor) => {
  const { post, author } = props;

  return (
    <div key={post.id} className="flex gap-3 border-b border-slate-400 p-4">
      <Image
        src={author.profileImageUrl}
        alt={`@${author.fullName} profile image`}
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
      />

      <div className="flex flex-col">
        <div className="flex items-center text-slate-200">
          <h3 className="font-bold">{author.fullName}</h3>
          <span className="text-sm text-slate-400">
            &nbsp;{`â€¢ ${dayjs(post.createdAt).fromNow()}`}
          </span>
        </div>

        <div className="text-2xl">{post.content}</div>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading } = api.posts.getAll.useQuery();

  if (isLoading) return <div className="m-1 text-center">Loading...</div>;
  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data?.map(({ post, author }) => (
        <PostView post={post} author={author} key={post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isSignedIn, isLoaded } = useUser();

  api.posts.getAll.useQuery();

  if (!isLoaded) return <div className="m-1 text-center">Loading...</div>;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {isSignedIn ? <CreatePostWizard /> : <SignInButton />}
          </div>

          <Feed />
        </div>

        <SignIn path="/sign-in" routing="path" signUpUrl="/sign-up" />
      </main>
    </>
  );
};

export default Home;
