import type {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
  NextPage,
} from "next";
import Head from "next/head";
import { api } from "@/utils/api";
import LoadingSpinner from "@/components/LoadingSpinner";
import { fullNameToUserName } from "@/utils/helpers";
import PageLayout from "@/components/PageLayout";
import Image from "next/image";
import PostView from "@/components/PostView";
import { generateSSGHelper } from "@/server/ssgHelper";

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

const ProfileFeed = (props: { userId: string }) => {
  const { data, isLoading } = api.posts.getPostsByUserId.useQuery(props.userId);

  if (isLoading) return <LoadingSpinner />;
  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data?.map(({ post, author }) => (
        <PostView post={post} author={author} key={post.id} />
      ))}
    </div>
  );
};

const ProfilePage: NextPage<PageProps> = ({ userId }) => {
  const { data, isLoading } = api.profile.getUserById.useQuery(userId);

  if (isLoading) return <LoadingSpinner />;
  if (!data) return <div>404 | User not found</div>;

  const username = fullNameToUserName(data.fullName);

  return (
    <>
      <Head>
        <title>{`@${fullNameToUserName(data.fullName)} | Chirp T3 App`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="relative h-48 bg-slate-600">
          <Image
            src={data.profileImageUrl}
            alt={`${username}'s profile image`}
            width={128}
            height={128}
            className="absolute left-0 bottom-0 ml-4 translate-y-1/2 transform rounded-full border-4 border-black bg-black"
          />
        </div>

        <div className="h-16" />

        <div className="border-b border-slate-400 px-6 py-1 pb-8">
          <h3 className="text-2xl font-bold">{data.fullName}</h3>
          <p className="text-slate-500">@{username}</p>
        </div>

        <ProfileFeed userId={userId} />
      </PageLayout>
    </>
  );
};

export default ProfilePage;

export const getStaticProps: GetStaticProps<{ userId: string }> = async (
  ctx
) => {
  const ssg = generateSSGHelper();

  const userId = ctx.params?.userId;

  if (typeof userId !== "string") throw new Error("No Slug");

  await ssg.profile.getUserById.prefetch(userId);

  return {
    props: {
      trpcState: ssg.dehydrate(),
      userId,
    },
  };
};

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
